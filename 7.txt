Create Stud Marks table to store student names and total marks

CREATE TABLE Stud Marks (

Name VARCHAR2(100),

Total Marks NUMBER

);

Create Result table to store Roll number, Name, and Class category CREATE TABLE Result (

Roll NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, Name VARCHAR2(100), Class VARCHAR2(50) );

Insert sample data into Stud Marks table

INSERT INTO Stud_Marks (Name, Total_Marks) VALUES (‘Aditee Mohanty’, 1500); INSERT INTO Stud_Marks (Name, Total_Marks) VALUES (‘Prachee Prasad’, 980); INSERT INTO Stud_Marks (Name, Total_Marks) VALUES (‘Rujuta Bhanose’, 850);

CREATE OR REPLACE PROCEDURE proc_Grade IS

BEGIN

Cursor to loop through all students in Stud_Marks

FOR student_rec IN (SELECT Name, Total_Marks FROM Stud_Marks) LOOP DECLARE

V_class VARCHAR2(50);

BEGIN

Categorizing students based on their total marks IF student_rec.Total_Marks BETWEEN 990 AND 1500 THEN v_class := ‘Distinction’;

ELSIF student_rec.Total_Marks BETWEEN 900 AND 989 THEN v_class:= ‘First Class’;

ELSIF student_rec.Total_Marks BETWEEN 825 AND 899 THEN v_class:= ‘Higher Second Class’;

ELSE

V_class:= ‘No Category’;

END IF;

Insert the result into the Result table

INSERT INTO Result (Name, Class) VALUES (student_rec.Name, v_class);

END;
END LOOP;

Commit the transaction

COMMIT;

END proc_Grade;

BEGIN

Call the stored procedure to categorize students proc_Grade;

END;

Select the result data

SELECT * FROM Result;

Stored function 
PROGRAM(with functions):

	Create Stud_Marks table

CREATE TABLE Stud_Marks ( Roll NUMBER PRIMARY KEY, Name VARCHAR2(100), Total Marks NUMBER

);

	Create Result table CREATE TABLE Result ( Roll NUMBER PRIMARY KEY, Name VARCHAR2(100), Class VARCHAR2(50) );

I

Create the Grade function CREATE OR REPLACE FUNCTION fn_Grade ( p_total_marks IN NUMBER ) RETURN VARCHAR2 IS v_class VARCHAR2(50);

BEGIN

IF p_total_marks BETWEEN 990 AND 1500 THEN v_class:= ‘Distinction’;

ELSIF p_total_marks BETWEEN 900 AND 989 THEN v_class := ‘First Class’;

ELSIF p_total_marks BETWEEN 825 AND 899 THEN

V_class:= ‘Higher Second Class’;

ELSE

V_class:= ‘No Category’;

END IF;

RETURN v class;

END fn Grade;

Insert sample data into Stud Marks INSERT INTO Stud Marks (Roll, Name, Total Marks) VALUES (1, ‘aditee’, 1400);
INSERT INFO Stud_Marks (Roll, Name, Total_Marks)

VALUES (2, ‘neel’, 1400);

INSERT INTO Stud_Marks (Roll, Name, Total Marks)

VALUES (3, soham’, 950);

INSERT INTO Stud_Marks (Roll, Name, Total_Marks)

VALUES (4, ‘Krisha’, 888);

INSERT INTO Stud_Marks (Roll, Name, Total_Marks) VALUES (5, harsh’, 1000);

COMMIT;

Execute the function for each student and insert results into Result table

DECLARE

V_roll NUMBER;

V_name VARCHAR2(100);

V_total_marks NUMBER;

V_class VARCHAR2(50);

BEGIN

	Cursor to fetch students and their marks from the Stud Marks table

Cursor to fetch students and their marks from the Stud Ma

FOR student_rec IN (SELECT Roll, Name, Total_Marks FROM Stud

V_roll := student_rec.Roll;

V_name: student_rec.Name;

V_total_marks := student_rec.Total_Marks;

Call the function to categorize each student v_class : fn_Grade(v_total_marks);

Insert the result into the ‘Result’ table

INSERT INTO Result (Roll, Name, Class) VALUES (v_roll, v_name, v_class);

END LOOP;

COMMIT;

END;

/

Retrieve results from the Result table

SELECT FROM Result;